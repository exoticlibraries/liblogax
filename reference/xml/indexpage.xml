<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>liblogax</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="liblogax.png" inline="yes"></image>
</para>
<sect1 id="index_1autotoc_md0">
<title>liblogax</title>
<para>Blazing fast, simple and modular header-only logging library with zero allocation for C and C++, implemented in C90. Allow logging into various output formats such as Key-Value and JSON.</para>
<para>Logax is designed with speed and modularity in mind,. It requires no heap-allocated memory. Each components can be excluded by defining an <ulink url="#modularity">exclusion macro</ulink>, to adjust to an environment or increase compile/runtime speed.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a10e1dd4027f7f6a2b2384e0f6cedc543" kindref="member">logax_write_text_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a83b80fa0c873308d9f32fbcad80950b9" kindref="member">LOGAX_LEVEL_TRACE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>trace<sp/>output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a10e1dd4027f7f6a2b2384e0f6cedc543" kindref="member">logax_write_text_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19ad86f6500cd2833052dca0a563992052d" kindref="member">LOGAX_LEVEL_DEBUG</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>debug<sp/>output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a10e1dd4027f7f6a2b2384e0f6cedc543" kindref="member">logax_write_text_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19af8fda1837cc5280ed634d9f6f27242bc" kindref="member">LOGAX_LEVEL_INFO</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>an<sp/>info<sp/>output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a10e1dd4027f7f6a2b2384e0f6cedc543" kindref="member">logax_write_text_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19ad9f03cfa72140d98bad0d70c26732496" kindref="member">LOGAX_LEVEL_WARN</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>warning<sp/>output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a10e1dd4027f7f6a2b2384e0f6cedc543" kindref="member">logax_write_text_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a9fc66d044e119f9177d404fa7103f09e" kindref="member">LOGAX_LEVEL_ERROR</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>an<sp/>error<sp/>output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a10e1dd4027f7f6a2b2384e0f6cedc543" kindref="member">logax_write_text_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a56a44e494019e597d8099792b4a42279" kindref="member">LOGAX_LEVEL_FATAL</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>fatal<sp/>output&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Output</para>
<para><image type="html" name="crash_test_output.png" inline="yes"></image>
</para>
<para>The log output can be formatted as text, key/value or json. Where the output is not required or the platform does not have any output stream (e.g. Arduino, stm32) a callback can be registered that will process the log event.</para>
<para><hruler/>
</para>
<sect2 id="index_1autotoc_md1">
<title>Table of content</title>
<para><itemizedlist>
<listitem><para><ulink url="#features">Features</ulink></para>
</listitem><listitem><para><ulink url="#standards-compliance-and-portability">Standards Compliance and Portability</ulink></para>
</listitem><listitem><para><ulink url="#installation">Installation</ulink><itemizedlist>
<listitem><para><ulink url="#install">Install</ulink><itemizedlist>
<listitem><para><ulink url="#windows">Windows</ulink></para>
</listitem><listitem><para><ulink url="#unix-linux-mac">Unix, Linux, Mac</ulink></para>
</listitem><listitem><para><ulink url="#other-platforms">Other platforms</ulink></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#documentation">Documentation</ulink></para>
</listitem><listitem><para><ulink url="#usage">Usage</ulink><itemizedlist>
<listitem><para><ulink url="#logging-without-logaxLogger">Logging without LogaxLogger</ulink></para>
</listitem><listitem><para><ulink url="#logging-with-logaxLogger">Logging with LogaxLogger</ulink><itemizedlist>
<listitem><para><ulink url="#iinitialized-logaxLogger">Iinitialized LogaxLogger</ulink></para>
</listitem><listitem><para><ulink url="#logaxLogger-loggers">LogaxLogger Loggers</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#callbacks">Callbacks</ulink></para>
</listitem><listitem><para><ulink url="#output-formats">Output Formats</ulink><itemizedlist>
<listitem><para><ulink url="#text">Text</ulink></para>
</listitem><listitem><para><ulink url="#key-value">Key Value</ulink></para>
</listitem><listitem><para><ulink url="#json">JSON</ulink></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#modularity">Modularity</ulink><itemizedlist>
<listitem><para><ulink url="#logax_use_old_console_mode">LOGAX_USE_OLD_CONSOLE_MODE</ulink></para>
</listitem><listitem><para><ulink url="#logax_no_output_stream">LOGAX_NO_OUTPUT_STREAM</ulink></para>
</listitem><listitem><para><ulink url="#logax_logger_no_callback">LOGAX_LOGGER_NO_CALLBACK</ulink></para>
</listitem><listitem><para><ulink url="#logax_logger_no_output_stream">LOGAX_LOGGER_NO_OUTPUT_STREAM</ulink></para>
</listitem><listitem><para><ulink url="#logax_no_time">LOGAX_NO_TIME</ulink></para>
</listitem><listitem><para><ulink url="#logax_no_coloring">LOGAX_NO_COLORING</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ulink url="#how-it-works">How it works</ulink></para>
</listitem><listitem><para><ulink url="#contributing">Contributing</ulink></para>
</listitem><listitem><para><ulink url="#references">References</ulink></para>
</listitem><listitem><para><ulink url="#license">License</ulink></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md2">
<title>Features</title>
<para><itemizedlist>
<listitem><para>Single header only, just download <ref refid="logax_8h" kindref="compound">logax.h</ref> and you are good to go.</para>
</listitem><listitem><para>Speed. logax was developed with speed and zero performance intrusion in mind.</para>
</listitem><listitem><para>Modular, excluded un-used features from your test, <ulink url="https://exoticlibraries.github.io/liblogax/docs/modularity.html">modularity</ulink>.</para>
</listitem><listitem><para>Zero allocation, No memory allocation.</para>
</listitem><listitem><para>Levelled logging to customize and differentiate the outputs.</para>
</listitem><listitem><para>Support for callbacks and hooks.</para>
</listitem><listitem><para>Very portable, compatible with ANSI C and C++98 without any trade off in functionalities.</para>
</listitem><listitem><para>Output log in text, key-value and JSON encoding formats.</para>
</listitem><listitem><para>Pretty logging for all supported output formats.</para>
</listitem><listitem><para>Simple method to achieve options in the logging system using bitwise operations.</para>
</listitem><listitem><para>Detail documentation with examples and API references.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md3">
<title>Standards Compliance and Portability</title>
<para>The project is compliant with the original C language specification ISO/IEC 9899:1990 and the first POSIX specification IEEE Std 1003.1-1988 which ensures the project compatibility in various environments.</para>
<para>Even though the project is designed for C, but also works with C++ as it is compatible with C++98 Standard (ISO/IEC 14882:1998), C++03 Standard (ISO/IEC 14882:2003) and C++11 Standard (ISO/IEC 14882:2011).</para>
<para>The project can be used with any C or C++ compiler. There are optional macros and options that can be used to attain the desired output in the case of undesired results.</para>
</sect2>
<sect2 id="index_1autotoc_md4">
<title>Installation</title>
<para>If you install the library file <computeroutput><ref refid="logax_8h" kindref="compound">logax.h</ref></computeroutput> using any of the commands below, it can be included in your test like <computeroutput>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</computeroutput>.</para>
<sect3 id="index_1autotoc_md5">
<title>Windows</title>
<para>Install the library using powershell. It auto detect your installed C and C++ compilers include directory and install liblogax into the include folder. Execute the command in powershell as admin.</para>
<para><programlisting filename=".powershell"><codeline><highlight class="normal">&amp;<sp/>$([scriptblock]::Create((New-Object<sp/>Net.WebClient).DownloadString(&quot;https://exoticlibraries.github.io/magic/install.ps1&quot;)))<sp/>liblogax</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md6">
<title>Unix, Linux, Mac</title>
<para>Use the remote installation script to install liblogax with bash. If the command is executes with super user priviledge (sudo) it will be installed in the folder /usr/include else it will be installed in the folder /usr/local/include. Or you can specify where to install it using the option <computeroutput>--installfolder=./</computeroutput></para>
<para><programlisting filename=".bash"><codeline><highlight class="normal">bash<sp/>&lt;(curl<sp/>-s<sp/>https://exoticlibraries.github.io/magic/install.sh)<sp/>liblogax</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md7">
<title>Other platforms</title>
<para>You can simply download the header file <computeroutput><ref refid="logax_8h" kindref="compound">logax.h</ref></computeroutput> from the repo into your project source folder and include it in your project. Download the file from <ulink url="https://github.com/exoticlibraries/liblogax/blob/main/include/exotic/logax.h">here</ulink>. Then you can include it in your test relatively like <computeroutput>#include &quot;logax.h&quot;</computeroutput>.</para>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md8">
<title>Documentation</title>
<para>The <ulink url="https://exoticlibraries.github.io/liblogax/docs/">documentation</ulink> provides several examples, tutorials, and detailed guides for using the library. While <ulink url="https://exoticlibraries.github.io/liblogax/reference/">reference</ulink> provides a low-level overview of all the implemented APIs in the library.</para>
<para>Some of the documentation pages are listed below:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://exoticlibraries.github.io/liblogax/docs/logging_without_logaxlogger.html">Logging without LogaxLogger</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/liblogax/docs/logging_with_logaxlogger.html">Logging with LogaxLogger</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/liblogax/modularity.html">Modularity</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/liblogax/logging_levels.html">Logging levels</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/liblogax/docs/output_formats.html">Output Formats</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/liblogax/docs/callback.html">Callback and Hook</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/liblogax/docs/options.html">Options</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/liblogax/how_it_works/index.html">How it works</ulink></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md9">
<title>Usage</title>
<para>it allows the log to be reported to custom function with optional printing to output stream. The default maximum number of callback that can be registered is 5.</para>
<sect3 id="index_1autotoc_md10">
<title>Logging without LogaxLogger</title>
<para>The library can be used to output log without need to setup the <computeroutput>LogaxLogger</computeroutput> struct, this will require the platform to have output stream or can write to file. If the macro LOGAX_NO_LOGGER is defined before including the <ref refid="logax_8h" kindref="compound">logax.h</ref> header file, the LogaxLogger struct and all related functions will not be compiled. The following functions provides the API to write to output stream in the supported formats</para>
<para><itemizedlist>
<listitem><para>logax_write_text_format_to_stream</para>
</listitem><listitem><para>logax_write_key_value_format_to_stream</para>
</listitem><listitem><para>logax_write_json_format_to_stream</para>
</listitem></itemizedlist>
</para>
<para><computeroutput>logax_write_text_format_to_stream</computeroutput> write the output in plain text format, the first parameter is the stream, followed by the options, the options is the combinations of any of the LOGAX_OPTION_*, LOGAX_LEVEL_* and LOGAX_FORMATTER_* macros.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a10e1dd4027f7f6a2b2384e0f6cedc543" kindref="member">logax_write_text_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a83b80fa0c873308d9f32fbcad80950b9" kindref="member">LOGAX_LEVEL_TRACE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>2021-11-21<sp/>06:34:07<sp/>TRACE<sp/>crash_test.c:13<sp/>Logging<sp/>the<sp/>test<sp/>for<sp/>TRACE</highlight></codeline>
</programlisting></para>
<para><computeroutput>logax_write_key_value_format_to_stream</computeroutput> write the output in a key-value format coloring is ignored in this format, the first parameter is the stream, followed by the options, the options is the combinations of any of the LOGAX_OPTION_*, LOGAX_LEVEL_* and LOGAX_FORMATTER_* macros.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a025351fd9bfd126885c7a45be5d696f7" kindref="member">logax_write_key_value_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a83b80fa0c873308d9f32fbcad80950b9" kindref="member">LOGAX_LEVEL_TRACE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>date=&quot;2021-11-21&quot;<sp/>time=&quot;06:41:34&quot;<sp/>level=&quot;TRACE&quot;<sp/>file=&quot;crash_test.c&quot;<sp/>line_number=8<sp/>function=&quot;main&quot;<sp/>message=&quot;This<sp/>is<sp/>a<sp/>trace<sp/>output&quot;</highlight></codeline>
</programlisting></para>
<para><computeroutput>logax_write_json_format_to_stream</computeroutput> write the output in a json format, the first parameter is the stream, followed by the options, the options is the combinations of any of the LOGAX_OPTION_*, LOGAX_LEVEL_* and LOGAX_FORMATTER_* macros.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a3b8a4d36e94d72052e051134f6f70cc0" kindref="member">logax_write_json_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a83b80fa0c873308d9f32fbcad80950b9" kindref="member">LOGAX_LEVEL_TRACE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{&quot;date&quot;:&quot;2021-11-21&quot;,&quot;time&quot;:&quot;06:42:25&quot;,&quot;level&quot;:&quot;TRACE&quot;,&quot;file&quot;:&quot;crash_test.c&quot;,&quot;line_number&quot;:8,&quot;function&quot;:&quot;main&quot;,&quot;message&quot;:&quot;This<sp/>is<sp/>a<sp/>trace<sp/>output&quot;},</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md11">
<title>Logging with LogaxLogger</title>
<para>In a situation where callback is needed, no FILE* ability on the platform or the flags/options want to be shared across the log, the <computeroutput>LogaxLogger</computeroutput> struct can be used. No memory allocation is required when initialized.</para>
<sect4 id="index_1autotoc_md12">
<title>Iinitialized LogaxLogger</title>
<para>To iinitialized the LogaxLogger the function <computeroutput>logax_init_logger</computeroutput> can be used, it not necessary to call the logax_init_logger function, all it does is set the LogaxLogger flags to default value, output_stream to stdout and fill the empty callbacks with NULL, these can be self-managed.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogax__logger__s" kindref="compound">LogaxLogger</ref><sp/>logax_logger;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logax_init_logger(&amp;logax_logger);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect4>
<sect4 id="index_1autotoc_md13">
<title>LogaxLogger Loggers</title>
<para>For each of the logging level in logax a function is provider that accepts <computeroutput>LogaxLogger</computeroutput> struct as parameter:</para>
<para><itemizedlist>
<listitem><para>logax_logger_trace</para>
</listitem><listitem><para>logax_logger_debug</para>
</listitem><listitem><para>logax_logger_info</para>
</listitem><listitem><para>logax_logger_warn</para>
</listitem><listitem><para>logax_logger_error</para>
</listitem><listitem><para>logax_logger_fatal</para>
</listitem></itemizedlist>
</para>
<para>Each of the function above invoke the corresponding <computeroutput>logax_write_*_format_to_stream</computeroutput> respectively, the default formatter when LogaxLogger is initialized with the function logax_init_logger is <computeroutput>LOGAX_FORMATTER_TEXT</computeroutput>, the output format can be changed using the function <computeroutput>logax_set_formatter</computeroutput>.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogax__logger__s" kindref="compound">LogaxLogger</ref><sp/>logax_logger;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logax_init_logger(&amp;logax_logger);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a4a4589ded3aa396aad87396ea9dea010" kindref="member">logax_set_formatter</ref>(&amp;logax_logger,<sp/><ref refid="logax_8h_1ae495419e226be29c3a41dc1be9ce155ea3fa9a595ae0b97412da60031da6dfc7d" kindref="member">LOGAX_FORMATTER_TEXT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1ad458079c436922a57f40d1edd6c41fa5" kindref="member">logax_logger_trace</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>TRACE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1adde55752181d16cd209cf4b4f6ca4cfd" kindref="member">logax_logger_debug</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>DEBUG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1aeae79d20c930ad343fa0ae9dd9c77102" kindref="member">logax_logger_info</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>INFO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a93356a610b71fc0c74a21f4b7d95d89f" kindref="member">logax_logger_warn</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>WARN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a72537f377caa26ee5d8c7d5bb4f44ff0" kindref="member">logax_logger_error</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>ERROR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a26c1e50583b289d821420ffe6a898b19" kindref="member">logax_logger_fatal</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>FATAL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect4>
</sect3>
<sect3 id="index_1autotoc_md14">
<title>Callbacks</title>
<para>LogaxLogger supports callback (or hook), the callbacks are invoked when a new log is sent. The callback can be used to create a custom output format or used to changed out the log is processed (e.g. blink bulb on andruino e.t.c). The output stream can be completely disabled by defining the macro <computeroutput>LOGAX_NO_OUTPUT_STREAM</computeroutput> or setting the option to QUIET using the function <computeroutput>logax_set_quiet</computeroutput>, in this case if callbacks are registered they will be invoked with the log event.</para>
<para>The callback function signature is</para>
<para><programlisting filename=".c"><codeline><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="logax_8h_1a591221f8bc07dd89ba8d51de294f468e" kindref="member">logax_callback</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*date,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>line_number,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*function_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...);</highlight></codeline>
</programlisting></para>
<para>The example below shows how to register a callback which is invoked when there is a new log</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_new_log_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*date,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>line_number,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*function_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&lt;logevent&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>&lt;date&gt;%s&lt;/date&gt;&quot;</highlight><highlight class="normal">,<sp/>date);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>&lt;time&gt;%s&lt;/time&gt;&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>&lt;level&gt;%s&lt;/level&gt;&quot;</highlight><highlight class="normal">,<sp/><ref refid="logax_8h_1a1bf66279477f920aa5afe161a335f4ed" kindref="member">GET_LEVEL_STRING</ref>(level));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>&lt;file&gt;%s&lt;/file&gt;&quot;</highlight><highlight class="normal">,<sp/>file);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>&lt;line_number&gt;%d&lt;/line_number&gt;&quot;</highlight><highlight class="normal">,<sp/>line_number);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>&lt;function_name&gt;%s&lt;/function_name&gt;&quot;</highlight><highlight class="normal">,<sp/>function_name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n<sp/><sp/>&lt;message&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>fmt);vfprintf(stdout,<sp/>fmt,<sp/>args);va_end(args);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;&lt;/message&gt;\n&lt;/logevent&gt;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogax__logger__s" kindref="compound">LogaxLogger</ref><sp/>logax_logger;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logax_init_logger(&amp;logax_logger);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1ad3cafc5ec2273b6130d11338dc275e8b" kindref="member">logax_set_quiet</ref>(&amp;logax_logger,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logax_logger_add_callback(&amp;logax_logger,<sp/>on_new_log_callback);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1ad458079c436922a57f40d1edd6c41fa5" kindref="member">logax_logger_trace</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>TRACE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1adde55752181d16cd209cf4b4f6ca4cfd" kindref="member">logax_logger_debug</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>DEBUG&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1aeae79d20c930ad343fa0ae9dd9c77102" kindref="member">logax_logger_info</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>INFO&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a93356a610b71fc0c74a21f4b7d95d89f" kindref="member">logax_logger_warn</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>WARN&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a72537f377caa26ee5d8c7d5bb4f44ff0" kindref="member">logax_logger_error</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>ERROR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a26c1e50583b289d821420ffe6a898b19" kindref="member">logax_logger_fatal</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Logging<sp/>the<sp/>test<sp/>for<sp/>FATAL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This gives the following outputs the in XML format as defined in the <computeroutput>on_new_log_callback</computeroutput> function:</para>
<para><programlisting filename=".xml"><codeline><highlight class="normal">&lt;</highlight><highlight class="keywordtype">logevent</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">date</highlight><highlight class="normal">&gt;2021-11-21&lt;/</highlight><highlight class="keywordtype">date</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">time</highlight><highlight class="normal">&gt;07:26:02&lt;/</highlight><highlight class="keywordtype">time</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">level</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">TRACE</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">level</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">file</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">C:</highlight><highlight class="normal">\</highlight><highlight class="keyword">Users</highlight><highlight class="normal">\</highlight><highlight class="keyword">azeez</highlight><highlight class="normal">\</highlight><highlight class="keyword">Documents</highlight><highlight class="normal">\</highlight><highlight class="keyword">OPEN_SOURCE</highlight><highlight class="normal">\</highlight><highlight class="keyword">EXOTIC_LIBRARIES</highlight><highlight class="normal">\</highlight><highlight class="keyword">liblogax</highlight><highlight class="normal">\</highlight><highlight class="keyword">test</highlight><highlight class="normal">\</highlight><highlight class="keyword">crash_test.c</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">file</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">line_number</highlight><highlight class="normal">&gt;25&lt;/</highlight><highlight class="keywordtype">line_number</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">function_name</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">main</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">function_name</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">message</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">Logging</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">the</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">test</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">for</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">TRACE</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">message</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">logevent</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;</highlight><highlight class="keywordtype">logevent</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">date</highlight><highlight class="normal">&gt;2021-11-21&lt;/</highlight><highlight class="keywordtype">date</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">time</highlight><highlight class="normal">&gt;07:26:02&lt;/</highlight><highlight class="keywordtype">time</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">level</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">DEBUG</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">level</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">file</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">C:</highlight><highlight class="normal">\</highlight><highlight class="keyword">Users</highlight><highlight class="normal">\</highlight><highlight class="keyword">azeez</highlight><highlight class="normal">\</highlight><highlight class="keyword">Documents</highlight><highlight class="normal">\</highlight><highlight class="keyword">OPEN_SOURCE</highlight><highlight class="normal">\</highlight><highlight class="keyword">EXOTIC_LIBRARIES</highlight><highlight class="normal">\</highlight><highlight class="keyword">liblogax</highlight><highlight class="normal">\</highlight><highlight class="keyword">test</highlight><highlight class="normal">\</highlight><highlight class="keyword">crash_test.c</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">file</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">line_number</highlight><highlight class="normal">&gt;26&lt;/</highlight><highlight class="keywordtype">line_number</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">function_name</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">main</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">function_name</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&lt;</highlight><highlight class="keywordtype">message</highlight><highlight class="normal">&gt;</highlight><highlight class="keyword">Logging</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">the</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">test</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">for</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">DEBUG</highlight><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">message</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/</highlight><highlight class="keywordtype">logevent</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md15">
<title>Output Formats</title>
<para>liblogax currently support only three output format, which are text, key-value and json. To set the output format of a LogaxLogger struct use the function <computeroutput>logax_set_formatter</computeroutput>. The following are the format options:</para>
<para><itemizedlist>
<listitem><para>LOGAX_FORMATTER_TEXT</para>
</listitem><listitem><para>LOGAX_FORMATTER_KEY_VALUE</para>
</listitem><listitem><para>LOGAX_FORMATTER_JSON</para>
</listitem></itemizedlist>
</para>
<sect4 id="index_1autotoc_md16">
<title>Text</title>
<para>Output as text using <computeroutput>logax_write_text_format_to_stream</computeroutput></para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a10e1dd4027f7f6a2b2384e0f6cedc543" kindref="member">logax_write_text_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a83b80fa0c873308d9f32fbcad80950b9" kindref="member">LOGAX_LEVEL_TRACE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">2021-11-21<sp/>08:41:19<sp/>TRACE<sp/>crash_test.c:6<sp/><sp/>---<sp/>[main<sp/><sp/><sp/><sp/><sp/>]<sp/>Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877</highlight></codeline>
</programlisting></para>
<para>Output as text using the <computeroutput>LOGAX_FORMATTER_TEXT</computeroutput> option with LogaxLogger.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogax__logger__s" kindref="compound">LogaxLogger</ref><sp/>logax_logger;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logax_init_logger(&amp;logax_logger);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a4a4589ded3aa396aad87396ea9dea010" kindref="member">logax_set_formatter</ref>(&amp;logax_logger,<sp/><ref refid="logax_8h_1ae495419e226be29c3a41dc1be9ce155ea3fa9a595ae0b97412da60031da6dfc7d" kindref="member">LOGAX_FORMATTER_TEXT</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1ad458079c436922a57f40d1edd6c41fa5" kindref="member">logax_logger_trace</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">2021-11-21<sp/>08:38:38<sp/>TRACE<sp/>crash_test.c:10<sp/>Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877</highlight></codeline>
</programlisting></para>
</sect4>
<sect4 id="index_1autotoc_md17">
<title>Key Value</title>
<para>Output as key value using <computeroutput>logax_write_key_value_format_to_stream</computeroutput></para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a025351fd9bfd126885c7a45be5d696f7" kindref="member">logax_write_key_value_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a83b80fa0c873308d9f32fbcad80950b9" kindref="member">LOGAX_LEVEL_TRACE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">date=&quot;2021-11-21&quot;<sp/>time=&quot;08:43:59&quot;<sp/>level=&quot;TRACE&quot;<sp/>file=&quot;crash_test.c&quot;<sp/>line_number=6<sp/>function=&quot;main&quot;<sp/>message=&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight></codeline>
</programlisting></para>
<para>Output as key value using the <computeroutput>LOGAX_FORMATTER_KEY_VALUE</computeroutput> option with LogaxLogger.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogax__logger__s" kindref="compound">LogaxLogger</ref><sp/>logax_logger;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logax_init_logger(&amp;logax_logger);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a4a4589ded3aa396aad87396ea9dea010" kindref="member">logax_set_formatter</ref>(&amp;logax_logger,<sp/><ref refid="logax_8h_1ae495419e226be29c3a41dc1be9ce155eaf7d9ff28b75d2cafd4926419218e32b3" kindref="member">LOGAX_FORMATTER_KEY_VALUE</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1ad458079c436922a57f40d1edd6c41fa5" kindref="member">logax_logger_trace</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">date=&quot;2021-11-21&quot;<sp/>time=&quot;08:46:00&quot;<sp/>level=&quot;TRACE&quot;<sp/>file=&quot;crash_test.c&quot;<sp/>line_number=10<sp/>message=&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight></codeline>
</programlisting></para>
</sect4>
<sect4 id="index_1autotoc_md18">
<title>JSON</title>
<para>Output as json using <computeroutput>logax_write_json_format_to_stream</computeroutput></para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a3b8a4d36e94d72052e051134f6f70cc0" kindref="member">logax_write_json_format_to_stream</ref>(stdout,<sp/><ref refid="logax_8h_1a1887fba6a0dff43ffdee5439a78d76c1a942653bdf78ba44e761bc670b3e6bac4" kindref="member">LOGAX_OPTION_ALL</ref><sp/>|<sp/><ref refid="logax_8h_1afad712dc25618fe276b8ec7b8b905d19a83b80fa0c873308d9f32fbcad80950b9" kindref="member">LOGAX_LEVEL_TRACE</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".json"><codeline><highlight class="normal">{&quot;date&quot;:&quot;2021-11-21&quot;,&quot;time&quot;:&quot;08:44:58&quot;,&quot;level&quot;:&quot;TRACE&quot;,&quot;file&quot;:&quot;crash_test.c&quot;,&quot;line_number&quot;:6,&quot;function&quot;:&quot;main&quot;,&quot;message&quot;:&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;},</highlight></codeline>
</programlisting></para>
<para>Output as json using the <computeroutput>LOGAX_FORMATTER_JSON</computeroutput> option with LogaxLogger.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structlogax__logger__s" kindref="compound">LogaxLogger</ref><sp/>logax_logger;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logax_init_logger(&amp;logax_logger);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1a4a4589ded3aa396aad87396ea9dea010" kindref="member">logax_set_formatter</ref>(&amp;logax_logger,<sp/><ref refid="logax_8h_1ae495419e226be29c3a41dc1be9ce155ea67d581a4395aecb8b0f6fc2256d8b59c" kindref="member">LOGAX_FORMATTER_JSON</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logax_8h_1ad458079c436922a57f40d1edd6c41fa5" kindref="member">logax_logger_trace</ref>(&amp;logax_logger,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">{&quot;date&quot;:&quot;2021-11-21&quot;,&quot;time&quot;:&quot;08:45:36&quot;,&quot;level&quot;:&quot;TRACE&quot;,&quot;file&quot;:&quot;crash_test.c&quot;,&quot;line_number&quot;:10,&quot;message&quot;:&quot;Enemy<sp/>approaching<sp/>from<sp/>X=108,Y=877&quot;},</highlight></codeline>
</programlisting></para>
</sect4>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md19">
<title>Modularity</title>
<para>liblogax is big on modularity, each component of the library can be excluded at compile time. The following macros if defined will exclude some component from the library:</para>
<para><itemizedlist>
<listitem><para>LOGAX_USE_OLD_CONSOLE_MODE</para>
</listitem><listitem><para>LOGAX_NO_OUTPUT_STREAM</para>
</listitem><listitem><para>LOGAX_LOGGER_NO_OUTPUT_STREAM</para>
</listitem><listitem><para>LOGAX_LOGGER_NO_CALLBACK</para>
</listitem><listitem><para>LOGAX_NO_COLORING</para>
</listitem><listitem><para>LOGAX_NO_TIME</para>
</listitem></itemizedlist>
</para>
<sect3 id="index_1autotoc_md20">
<title>LOGAX_USE_OLD_CONSOLE_MODE</title>
<para>If this macro is define the library will use the Windows API to color the log outputs, this macro is only effective on Windows system. This macro is most useful for old windows platform which the console cannot process the ANSI Color Codes.</para>
<para><programlisting><codeline><highlight class="normal">#define<sp/>LOGAX_USE_OLD_CONSOLE_MODE</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;exotic/logax.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//...</highlight></codeline>
</programlisting></para>
<para><blockquote><para>Note that there might slight different in the color variation between using Windows Console attributes and ANSI Color codes </para>
</blockquote></para>
</sect3>
<sect3 id="index_1autotoc_md21">
<title>LOGAX_NO_OUTPUT_STREAM</title>
<para>If this macro is defined the library will not be compiled with the writing to stream feature, both explicit write to streams function <computeroutput>logax_write_*_format_to_stream</computeroutput> and LogaxLogger loggers will not write to stream, but the callback will still be invoked is any is registered.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>LOGAX_NO_OUTPUT_STREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//...</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md22">
<title>LOGAX_LOGGER_NO_OUTPUT_STREAM</title>
<para>If this macro is defined the LogaxLogger struct will not be compiled with the writing to stream capability, but the explicit writing to stream functions <computeroutput>logax_write_*_format_to_stream</computeroutput> will be have the write to stream capability.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>LOGAX_LOGGER_NO_OUTPUT_STREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//...</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md23">
<title>LOGAX_LOGGER_NO_CALLBACK</title>
<para>Define this macro to exclude the callback and hook feature of the library, this does not affect the writing to output stream. You can still write the statement to register hook if needed but it ll have no effect unless this macro is removed.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>LOGAX_LOGGER_NO_CALLBACK</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//...</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md24">
<title>LOGAX_NO_COLORING</title>
<para>If this macro is define the library will not be compiled with pretty print capability. The flag <computeroutput>LOGAX_OPTION_COLORED</computeroutput> will also not be available for use to customize the output.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>LOGAX_NO_COLORING</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//...</highlight></codeline>
</programlisting></para>
</sect3>
<sect3 id="index_1autotoc_md25">
<title>LOGAX_NO_TIME</title>
<para>On a system that does not have floating point capability or the time headers are not available this macro can be defined to exclude adding data and time capability to the logging. Defining this macro will make the following macros unavailable <computeroutput>LOGAX_OPTION_DATE</computeroutput>, <computeroutput>LOGAX_OPTION_TIME</computeroutput>, <computeroutput>LOGAX_OPTION_DATE_TIME</computeroutput>.</para>
<para><programlisting filename=".c"><codeline><highlight class="preprocessor">#define<sp/>LOGAX_NO_TIME</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logax_8h" kindref="compound">exotic/logax.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//...</highlight></codeline>
</programlisting></para>
</sect3>
</sect2>
<sect2 id="index_1autotoc_md26">
<title>How it works</title>
<para>These three internal functions are responsible for the actual logging to output stream,<itemizedlist>
<listitem><para>logax_write_text_format_to_stream</para>
</listitem><listitem><para>logax_write_key_value_format_to_stream</para>
</listitem><listitem><para>logax_write_json_format_to_stream</para>
</listitem></itemizedlist>
</para>
<para>The functions accept variadic parameters, the first 3 parameters are compulsory and the followed X parameters are for the vfprintf function for formatting. The first parameter is the output stream <computeroutput>FILE *</computeroutput>, the second parameters is the flags to customize the outputs, the third parameter is the fmt to processes the variadic values.</para>
<para><computeroutput>LogaxLogger</computeroutput> struct allows logging properties and output stream to be shared across function calls, it internally uses the 3 functions above to output the log. The special feature of LogaxLogger is the callback. On new log entry all the registered callbacks are invoked with the log event.</para>
<para>See the pages at <ulink url="https://exoticlibraries.github.io/liblogax/how_it_works/index.html">how it works</ulink> for more explanation.</para>
</sect2>
<sect2 id="index_1autotoc_md27">
<title>Contributing</title>
<para>If you have any issue or you want to request a feature you can open a request <ulink url="https://github.com/exoticlibraries/liblogax/issues/new/choose">here</ulink> anytime and if you made some changes that should be added to the main project send in a <ulink url="https://github.com/exoticlibraries/liblogax/compare">pull request</ulink>.</para>
</sect2>
<sect2 id="index_1autotoc_md28">
<title>References</title>
<para><itemizedlist>
<listitem><para><ulink url="https://en.wikipedia.org/wiki/ANSI_C">ANSI C</ulink></para>
</listitem><listitem><para><ulink url="https://exoticlibraries.github.io/">Exotic Libraries</ulink></para>
</listitem><listitem><para><ulink url="https://thecarisma.github.io/">Author</ulink></para>
</listitem><listitem><para><ulink url="https://icons8.com/icon/84401/login">Login</ulink> icon by <ulink url="https://icons8.com">Icons8</ulink></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md29">
<title>License</title>
<para>MIT License Copyright (c) 2021, Adewale Azeez </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
